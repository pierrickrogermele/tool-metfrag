#!/bin/bash

# See http://c-ruttkies.github.io/MetFrag/projects/metfrag22cl/

#############
# CONSTANTS #
#############

SCRIPTDIR=$(dirname $0)

MSPOS=pos
MSNEG=neg

DBPUBCHEM=pubchem
DBKEGG=kegg
DBCHEMSPIDER=chemspider

OUTTYPECSV=csv
OUTTYPEXLS=xls

####################
# GLOBAL VARIABLES #
####################

CHEMSPIDER_TOKEN=

FILTER=yes
NEUTRAL_PRECURSOR_MASS=
IONIZED_PRECURSOR_MASS=

GENERATE_FROM_FILE=yes
KEEP_GENERATED_PARAM_FILE=

#########
# ERROR #
#########

function error {
	printf "ERROR: $1\n" >&2
	exit 1
}

####################
# GET OPTION VALUE #
####################

function get_opt_val {
	if [ -z "$2" ] ; then
		error "\"$1\" requires a non-empty option argument."
	fi
	echo $2
}

#############
# READ ARGS #
#############

function read_args {

	while true ; do
		case $1 in
			-f|--file|--param-file) g_param_file=$(get_opt_val $1 $2) ; GENERATE_FROM_FILE= ; shift ;;
			--output-param-file) g_param_file=$(get_opt_val $1 $2) ; KEEP_GENERATED_PARAM_FILE=yes ; shift ;;
			-d|--db|--database) g_db=$(get_opt_val $1 $2) ; shift ;;
			-m|--mode) g_mode=$(get_opt_val $1 $2) ; shift ;;
			--precursor-neutral-mass) NEUTRAL_PRECURSOR_MASS=$(get_opt_val $1 $2) ; shift ;;
			--precursor-ionized-mass) IONIZED_PRECURSOR_MASS=$(get_opt_val $1 $2) ; shift ;;
			--precursor-formula) g_precursor_formula=$(get_opt_val $1 $2) ; shift ;;
			--relative-mass-deviation) g_relative_mass_deviation=$(get_opt_val $1 $2) ; shift ;;
			-s|--spectrum|--spectrum-file) g_spectrum_file=$(get_opt_val $1 $2) ; shift ;;
			-o|--output-file) g_output_file=$(get_opt_val $1 $2) ; shift ;;
			-k|--chemspider-security-token) CHEMSPIDER_TOKEN=$(get_opt_val $1 $2) ; shift ;;
			--no-filter) FILTER= ;;
			-?*) error "Unknown option \"$1\"." ;;
			*) break
		esac
		shift
	done

	# Check parameters
	if [ -n "$GENERATE_FROM_FILE" ] ; then
		[ -n "$g_db" ] || error "You must select a database through -d option."
		[ "$g_db" = "$DBPUBCHEM" -o "$g_db" = "$DBKEGG" -o "$g_db" = "$DBCHEMSPIDER" ] || error "The database must be one of \"$DBKEGG\", \"$DBPUBCHEM\" or \"$CHEMSPIDER\"."
		[ "$g_db" != "$DBCHEMSPIDER" -o -n "$CHEMSPIDER_TOKEN" ] || error "You must provide a security token through -k option when using database ChemSpider."
		[ -n "$g_spectrum_file" ] || error "You must specify a spectrum file through -s option."
		[ -f "$g_spectrum_file" ] || error "Cannot find the spectrum file \"$g_spectrum_file\"."
		[ -n "$g_mode" ] || error "You must specify an MS mode through -m option."
		[ "$g_mode" = "$MSPOS" -o "$g_mode" = "$MSNEG" ] || error "MS mode must be either \"$MSPOS\" or \"$MSNEG\"."
		[ -n "$NEUTRAL_PRECURSOR_MASS" -o -n "$IONIZED_PRECURSOR_MASS" ] || error "You must specify a precursor M/Z through either --precursor-neutral-mass or --precursor-ionized-mass option."
		[ -n "$g_relative_mass_deviation" -o -n "$g_precursor_formula" ] || error "You must specify either the precursor formula (option --precursor-formula) or the relative mass deviation (option --relative-mass-deviation). "

		# Output file
		[ -n "$g_output_file" ] || error "You must specify an output file through -o option."
		if [ -z "$g_output_type" ] ; then
			ext=${g_output_file##*.}
			case $ext in
				csv|CSV) g_output_type=$OUTTYPECSV ;;
				xls|XLS) g_output_type=$OUTTYPEXLS ;;
				*) error "Unknown extension \"$ext\" for output file \"$g_output_file\"."
			esac
		fi
		[ -n "$g_output_type" ] || error "You must specify an output file type through -t option."
		[ "$g_output_type" = "$OUTTYPECSV" -o "$g_output_type" = "$OUTTYPEXLS" ] || error "The output type must be one of \"$OUTTYPECSV\" or \"$OUTTYPEXLS\"."
	fi
}

#####################
# CREATE PARAM FILE #
#####################

function create_param_file {

	# Get database tag
	case $g_db in
		$DBPUBCHEM) database=PubChem ;;
		$DBKEGG) database=KEGG ;;
		$DBCHEMSPIDER) database=ChemSpider ;;
	esac

	# Database search param
	[ -z "$g_precursor_formula" ] || database_search_param="NeutralPrecursorMolecularFormula = $g_precursor_formula"
	[ -z "$g_relative_mass_deviation" ] || database_search_param="DatabaseSearchRelativeMassDeviation = $g_relative_mass_deviation"
	neutral_precursor_mass=\#
	[ -z "NEUTRAL_PRECURSOR_MASS" ] || precursor_mass="NeutralPrecursorMass = $NEUTRAL_PRECURSOR_MASS"
	[ -z "IONIZED_PRECURSOR_MASS" ] || precursor_mass="IonizedPrecursorMass = $IONIZED_PRECURSOR_MASS"
	
	# Get mode tag
	case $g_mode in
		$MSPOS) posmode=True ; mode='+1' ;;
		$MSNEG) posmode=False ; mode='-1' ;;
	esac
	
	# Get writer tag
	case $g_output_type in
		$OUTTYPECSV) writer=CSV ;;
		$OUTTYPEXLS) writer=XLS ;;
	esac
	
	# Output file
	output_file_name=$(basename "$g_output_tmp_file")
	output_file_dir=$(dirname "$g_output_tmp_file")
	case $g_output_type in
		$OUTTYPECSV) g_output_tmp_file="$g_output_tmp_file.csv" ;;
		$OUTTYPEXLS) g_output_tmp_file="$g_output_tmp_file.xls" ;;
	esac

	# ChemSpider security token
	chemspider_token=\#
	if [ -n "$CHEMSPIDER_TOKEN" ] ; then
		chemspider_token="ChemSpiderToken = $CHEMSPIDER_TOKEN"
	fi

	# Filtering
	filtering=\#
	if [ -n "$FILTER" ] ; then
		prefiltering="MetFragPreProcessingCandidateFilter = UnconnectedCompoundFilter"
		postfiltering="MetFragPostProcessingCandidateFilter = InChIKeyFilter"
	fi

	cat >$g_param_file <<EOF
#
# data file containing mz intensity peak pairs (one per line)
#
PeakListPath = $g_spectrum_file
#
# Database parameters -> how to retrieve candidates
#
MetFragDatabaseType = $database
$database_search_param
$precursor_mass
$chemspider_token
#
# peak matching parameters
#
FragmentPeakMatchAbsoluteMassDeviation = 0.001
FragmentPeakMatchRelativeMassDeviation = 5
PrecursorIonMode = $mode
IsPositiveIonMode = $posmode
#
# scoring parameters
#
MetFragScoreTypes = FragmenterScore
MetFragScoreWeights = 1.0
#
# output
# SDF, XLS, CSV, ExtendedXLS, ExtendedFragmentsXLS
#
MetFragCandidateWriter = $writer
SampleName = $output_file_name
ResultsPath = $output_file_dir
#
# following parameteres can be kept as they are
#
MaximumTreeDepth = 2
$prefiltering
$postfiltering
# NumberThreads = 1
EOF
}

################
# CALL METFRAG #
################

function call_metfrag {
	java -jar $SCRIPTDIR/MetFrag2.2-CL.jar $g_param_file
}

########
# MAIN #
########

read_args "$@"

if [ -n "$GENERATE_FROM_FILE" ] ; then

	# Create output temp file
	g_output_tmp_file=$(mktemp -t metfrag.output.XXXXXX)

	[ -n "$g_param_file" ] || g_param_file=$(mktemp -t metfrag.XXXXXX)
	create_param_file
	call_metfrag
	[ -z "$KEEP_GENERATED_PARAM_FILE" ] && rm $g_param_file

	# Rename output temp file
	mv $g_output_tmp_file $g_output_file
else
	call_metfrag
fi
